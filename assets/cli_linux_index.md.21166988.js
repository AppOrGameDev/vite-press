import{_ as e,o as a,c as s,R as o}from"./chunks/framework.d4a1f2f4.js";const b=JSON.parse('{"title":"Shell 命令","description":"","frontmatter":{},"headers":[],"relativePath":"cli/linux/index.md","filePath":"cli/linux/index.md","lastUpdated":1683892646000}'),n={name:"cli/linux/index.md"},l=o('<h1 id="shell-命令" tabindex="-1">Shell 命令 <a class="header-anchor" href="#shell-命令" aria-label="Permalink to &quot;Shell 命令&quot;">​</a></h1><h2 id="打印彩色文本" tabindex="-1">打印彩色文本 <a class="header-anchor" href="#打印彩色文本" aria-label="Permalink to &quot;打印彩色文本&quot;">​</a></h2><p>1、使用 printf</p><blockquote><p>printf &quot;\\e[背景底色号码;字体颜色号码m 格式化输出符号 \\e[0m&quot; &quot;文本内容&quot;</p></blockquote><div class="language-shell line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">printf</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">\\e[40;37m %s\\n \\e[0m</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">hello world!</span><span style="color:#89DDFF;">&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>2、使用 echo</p><blockquote><p>echo -e &quot;\\e[背景底色号码;字体颜色号码m 文本内容 \\e[0m&quot;</p></blockquote><div class="language-shell line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">echo</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-e</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">\\e[40;37m hello world! \\e[0m</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><blockquote><p>字体颜色: 重置=0，黑色=30，红色=31，绿色=32， 黄色=33，蓝色=34， 洋红=35， 青色=36， 白色=37</p><p>背景颜色: 重置=0，黑色=40，红色=41，绿色=42， 黄色=43，蓝色=44， 洋红=45， 青色=46， 白色=47</p></blockquote><p>在 Linux 中，分号(<code>;</code>)、双竖线(<code>||</code>)、双与(<code>&amp;&amp;</code>)、单竖线(<code>|</code>)和单与(<code>&amp;</code>)都是用于控制命令的执行方式的特殊字符。</p><ol><li>分号 (<code>;</code>) 分号用于分隔多个命令，这些命令将依次执行，无论前面的命令是否成功。例如：</li></ol><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">command1 ; command2 ; command3</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><code>command1</code>、<code>command2</code>、<code>command3</code> 将依次执行，不管前面的命令是否执行成功。</p><ol start="2"><li>双竖线 (<code>||</code>) 双竖线用于当左侧的命令执行失败时才执行右侧的命令。例如：</li></ol><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">command1 || command2</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>如果 <code>command1</code> 执行失败，那么 <code>command2</code> 将会执行。</p><ol start="3"><li>双与 (<code>&amp;&amp;</code>) 双与用于当左侧的命令执行成功时才执行右侧的命令。例如：</li></ol><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">command1 &amp;&amp; command2</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>如果 <code>command1</code> 执行成功，那么 <code>command2</code> 将会执行。如果 <code>command1</code> 执行失败，那么 <code>command2</code> 将不会执行。</p><ol start="4"><li>单竖线 (<code>|</code>) 单竖线用于将左侧的命令的输出作为右侧命令的输入。例如：</li></ol><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">command1 | command2</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><code>command1</code> 的输出将会作为 <code>command2</code> 的输入。</p><ol start="5"><li>单与 (<code>&amp;</code>) 单与用于将命令放到后台执行。例如：</li></ol><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">command &amp;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><code>command</code> 将会在后台运行，允许您在终端继续执行其他命令。</p><p>这些特殊字符可以组合使用，以便更好地控制命令的执行。例如：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">command1 &amp;&amp; (command2 || command3) ; command4 | command5</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><code>command1</code> 执行成功后，将会执行 <code>command2</code> 或 <code>command3</code> 中的一个（如果 <code>command2</code> 执行失败），然后执行 <code>command4</code> 并将其输出发送到 <code>command5</code>。</p><p>需要注意的是，使用这些特殊字符时，需要小心处理命令的执行顺序，以免出现意外的结果。</p>',29),c=[l];function p(d,t,i,r,m,u){return a(),s("div",null,c)}const C=e(n,[["render",p]]);export{b as __pageData,C as default};
