import{_ as e,o as a,c as l,U as i}from"./chunks/framework.c0c21d38.js";const t="/vite-press/assets/Collection类图.5a54d589.jpg",o="/vite-press/assets/Collection类图02.6316f6f0.jpg",b=JSON.parse('{"title":"Java集合框架","description":"","frontmatter":{},"headers":[],"relativePath":"backend/Java/Java集合框架.md","filePath":"backend/Java/Java集合框架.md","lastUpdated":1715700471000}'),r={name:"backend/Java/Java集合框架.md"},s=i('<h1 id="java集合框架" tabindex="-1">Java集合框架 <a class="header-anchor" href="#java集合框架" aria-label="Permalink to &quot;Java集合框架&quot;">​</a></h1><h2 id="类图" tabindex="-1">类图 <a class="header-anchor" href="#类图" aria-label="Permalink to &quot;类图&quot;">​</a></h2><p><img src="'+t+'" alt=""></p><p><img src="'+o+'" alt=""></p><h2 id="java集合框架-1" tabindex="-1">Java集合框架 <a class="header-anchor" href="#java集合框架-1" aria-label="Permalink to &quot;Java集合框架&quot;">​</a></h2><h3 id="补充每个类的特性以及常用api" tabindex="-1">补充每个类的特性以及常用api <a class="header-anchor" href="#补充每个类的特性以及常用api" aria-label="Permalink to &quot;补充每个类的特性以及常用api&quot;">​</a></h3><ul><li>Collection <ul><li>List <ul><li>ArrayList</li><li>Vector <code>类似ArrayList</code> <code>线程(相对)安全;加入async</code> <code>允许添加null元素</code><ul><li>Stack <strong style="color:red;">栈;后进先出（LIFO，Last In First Out）</strong><ul><li><code>boolean empty()</code> <strong style="color:green;">测试栈是否为空</strong></li><li><code>Object peek()</code> <strong style="color:green;">查看栈顶部的对象，但不从栈中移除它</strong></li><li><code>Object pop()</code> <strong style="color:green;">移除栈顶部的对象，并作为此函数的值返回该对象</strong></li><li><code>Object push(Object element)</code> <strong style="color:green;">把对象压入栈顶部</strong></li><li><code>int search(Object element)</code> <strong style="color:green;">返回对象在栈中的位置，以 1 为基数</strong></li></ul></li></ul></li><li>LinkedList</li></ul></li><li>Set <ul><li>HashSet <ul><li>LinkedHashSet</li></ul></li><li>TreeSet</li><li>CopyOnWriteArraySet</li></ul></li><li>Queue <ul><li>ArrayDeque</li><li>PriorityQueue</li></ul></li></ul></li><li>Map <ul><li>HashMap <ul><li>LinkedHashMap</li></ul></li><li>WeakHashMap</li><li>IdentityHashMap</li><li>TreeMap</li><li>ConcurrentHashMap</li><li>HashTable</li></ul></li></ul><h2 id="基于上面的整理-归纳成表格" tabindex="-1">基于上面的整理,归纳成表格 <a class="header-anchor" href="#基于上面的整理-归纳成表格" aria-label="Permalink to &quot;基于上面的整理,归纳成表格&quot;">​</a></h2>',8),n=[s];function c(d,u,h,p,_,g){return a(),l("div",null,n)}const v=e(r,[["render",c]]);export{b as __pageData,v as default};
