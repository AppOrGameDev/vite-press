import{_ as e,k as o,l as c,U as d}from"./chunks/framework.a3e818c0.js";const h=JSON.parse('{"title":"计算机网络","description":"计算机网络常问的基础知识","frontmatter":{"title":"计算机网络","description":"计算机网络常问的基础知识","category":"browser","tags":["HTTP","TCP"]},"headers":[],"relativePath":"frontend/browser/browser-network.md","filePath":"frontend/browser/browser-network.md","lastUpdated":1684678997000}'),l={name:"frontend/browser/browser-network.md"},i=d(`<h1 id="计算机网络" tabindex="-1">计算机网络 <a class="header-anchor" href="#计算机网络" aria-label="Permalink to &quot;计算机网络&quot;">​</a></h1><h2 id="http" tabindex="-1">HTTP <a class="header-anchor" href="#http" aria-label="Permalink to &quot;HTTP&quot;">​</a></h2><p><code>HTTP</code> 是一种用于传输超文本的协议，是互联网上应用最为广泛的协议之一。</p><ol><li><strong>基本概念</strong></li></ol><ul><li><code>HTTP</code> 是一个无状态协议：即每个请求之间是没有关联的，每个请求都是独立的。</li><li><code>HTTP</code> 是基于请求和响应的：客户端发送请求给服务器，服务器返回响应给客户端。</li><li><code>HTTP</code> 是文本协议：<code>HTTP</code> 使用文本格式进行通信，请求和响应都是由头部和主体两部分组成的文本格式。</li></ul><ol start="2"><li><strong>工作原理</strong></li></ol><ul><li>客户端发起请求：客户端使用 <code>HTTP</code> 协议向服务器发送请求，请求包含请求方法、请求 <code>URL</code>、请求头和请求主体等信息。</li><li>服务器响应请求：服务器接收到客户端的请求后，进行处理并返回响应，响应包含状态码、响应头和响应主体等信息。</li><li>连接关闭：完成请求和响应之后，客户端和服务器之间的连接会被关闭。</li></ul><p><code>HTTP</code> 的常见请求方法：</p><table><thead><tr><th>方法</th><th>作用</th></tr></thead><tbody><tr><td>GET</td><td>获取资源</td></tr><tr><td>POST</td><td>提交数据</td></tr><tr><td>PUT</td><td>更新资源</td></tr><tr><td>DELETE</td><td>删除资源</td></tr><tr><td>HEAD</td><td>获取响应头信息</td></tr><tr><td>OPTIONS</td><td>获取服务器支持的请求方法等信息</td></tr></tbody></table><p>总的来说，<code>HTTP</code> 是一种简单、可靠、可扩展的协议，它在互联网中扮演着重要的角色，被广泛应用于 <code>Web</code> 开发、移动应用、<code>API</code> 接口等领域。</p><h3 id="get与post的区别" tabindex="-1">GET与POST的区别 <a class="header-anchor" href="#get与post的区别" aria-label="Permalink to &quot;GET与POST的区别&quot;">​</a></h3><p><code>GET</code> 和 <code>POST</code> 是 <code>HTTP</code> 协议中常用的两种请求方法，它们之间的主要区别如下：</p><ol><li>参数传递方式不同</li></ol><ul><li><code>GET</code> 请求：参数是通过 <code>URL</code> 传递的，即将参数拼接在 <code>URL</code> 后面。</li><li><code>POST</code> 请求：参数是通过请求体传递的，即将参数放在请求体中，请求头中会包含 <code>Content-Type</code> 字段来说明请求体中的数据格式。</li></ul><ol start="2"><li>参数传递大小限制不同</li></ol><ul><li><code>GET</code> 请求：由于参数是通过 <code>URL</code> 传递的，因此传递的参数大小有限制，通常不超过 <code>2KB</code>。</li><li><code>POST</code> 请求：由于参数是通过请求体传递的，因此传递的参数大小没有限制。</li></ul><ol start="3"><li>安全性不同</li></ol><ul><li><code>GET</code> 请求：参数是暴露在 <code>URL</code> 中的，因此在请求过程中容易被拦截、篡改或缓存，不适合传递敏感信息。</li><li><code>POST</code> 请求：参数是放在请求体中的，相对于 <code>GET</code> 请求更安全，适合传递敏感信息。</li></ul><ol start="4"><li>缓存机制不同</li></ol><ul><li><code>GET</code> 请求：浏览器会缓存 <code>GET</code> 请求的结果，下次请求相同的 <code>URL</code> 时，直接从缓存中获取，不会重新请求服务器。</li><li><code>POST</code> 请求：浏览器<strong>不</strong>会缓存 <code>POST</code> 请求的结果，每次请求都会向服务器发送请求。</li></ul><ol start="5"><li>应用场景不同</li></ol><ul><li><code>GET</code> 请求：通常用于获取数据，如搜索、分页等。</li><li><code>POST</code> 请求：通常用于提交数据，如登录、注册等。</li></ul><p>总之，<code>GET</code> 和 <code>POST</code> 请求各有优缺点，需要根据实际业务需求选择合适的请求方法。</p><h3 id="http报文组成" tabindex="-1">HTTP报文组成 <a class="header-anchor" href="#http报文组成" aria-label="Permalink to &quot;HTTP报文组成&quot;">​</a></h3><p><code>HTTP</code> 报文是 <code>HTTP</code> 协议中的核心概念之一，包括两部分：请求报文和响应报文。</p><blockquote><p>HTTP报文是一个文本格式的信息，它包含了请求或响应所需要的全部信息，使得客户端和服务器端能够有效地进行通信和数据传输。</p></blockquote><h4 id="请求报文" tabindex="-1">请求报文 <a class="header-anchor" href="#请求报文" aria-label="Permalink to &quot;请求报文&quot;">​</a></h4><p>请求报文包括请求行、请求头、请求体三部分，格式如下：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">&lt;method&gt; &lt;request-URL&gt; &lt;version&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">&lt;headers&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">&lt;body&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>其中：</p><ul><li>请求行：包括请求方法、请求 <code>URL</code> 和协议版本，用空格分隔；</li><li>请求头：包括多个键值对，每个键值对用冒号分隔，多个键值对之间用回车符和换行符分隔；</li><li>请求体：用于携带请求参数和数据，请求体可以为空。</li></ul><h4 id="响应报文" tabindex="-1">响应报文 <a class="header-anchor" href="#响应报文" aria-label="Permalink to &quot;响应报文&quot;">​</a></h4><p>响应报文也包括三部分：状态行、响应头和响应体，格式如下：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">&lt;version&gt; &lt;status&gt; &lt;reason-phrase&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">&lt;headers&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">&lt;body&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>其中：</p><ul><li>状态行：包括协议版本、状态码和状态消息，用空格分隔；</li><li>响应头：包括多个键值对，每个键值对用冒号分隔，多个键值对之间用回车符和换行符分隔；</li><li>响应体：用于携带响应结果和数据，响应体可以为空。</li></ul><h4 id="request-header" tabindex="-1">Request Header <a class="header-anchor" href="#request-header" aria-label="Permalink to &quot;Request Header&quot;">​</a></h4><p><code>Request Header</code>（请求头）是 <code>HTTP</code> 请求报文中的一部分，包含了客户端（浏览器或应用程序）向服务器发送请求时的附加信息，以键值对的形式组织。常见的请求头有：</p><ul><li><code>User-Agent</code>：客户端的类型及版本号</li><li><code>Referer</code>：请求来源的 <code>URL</code></li><li><code>Accept</code>：客户端支持的 <code>MIME</code> 类型</li><li><code>Accept-Language</code>：客户端支持的语言类型</li><li><code>Accept-Encoding</code>：客户端支持的压缩类型</li><li><code>Host</code>：请求的服务器域名</li><li><code>Connection</code>：客户端与服务器之间连接的类型</li><li><code>Cookie</code>：客户端存储的 <code>Cookie</code> 信息</li><li><code>Cache-Control</code>：请求缓存的控制参数</li></ul><p>请求头的作用是提供给服务器更多的信息，以便服务器更好地处理请求。</p><h4 id="response-header" tabindex="-1">Response Header <a class="header-anchor" href="#response-header" aria-label="Permalink to &quot;Response Header&quot;">​</a></h4><p><code>Response Header</code>（响应头）是 <code>HTTP</code> 响应报文中的一部分，包含了服务器对客户端请求的响应信息，以键值对的形式组织。常见的响应头有：</p><ul><li><code>Content-Type</code>：响应内容的MIME类型</li><li><code>Content-Length</code>：响应内容的长度</li><li><code>Cache-Control</code>：响应缓存的控制参数</li><li><code>Set-Cookie</code>：服务器要求客户端存储的 <code>Cookie</code> 信息</li><li><code>Location</code>：重定向的 <code>URL</code> 地址</li><li><code>ETag</code>：资源的标识符，用于缓存控制</li><li><code>Last-Modified</code>：资源的最后修改时间，用于缓存控制</li><li><code>Expires</code>：资源的过期时间，用于缓存控制</li></ul><p>响应头的作用是告知客户端服务器对请求的响应情况，以便客户端进行下一步处理。</p><h3 id="https" tabindex="-1">HTTPS <a class="header-anchor" href="#https" aria-label="Permalink to &quot;HTTPS&quot;">​</a></h3><ol><li><strong>基本概念</strong></li></ol><p><code>HTTPS</code> 是 <code>HTTP</code> 协议的一种安全版本，通常使用 <code>SSL/TLS</code> 协议进行加密。它在数据传输的过程中使用了公钥加密和私钥解密的方式来保护数据的机密性和完整性。<code>HTTPS</code> 协议在数据传输过程中，采用了多种加密技术，包括对称密钥加密、非对称密钥加密和消息摘要算法等。这些技术保证了数据在传输过程中不会被黑客窃取或篡改。</p><ol start="2"><li><strong>作用</strong></li></ol><p>使用 <code>HTTPS</code> 协议可以防止中间人攻击、身份伪装、数据篡改、数据窃听等问题。通过数字证书，可以验证网站的真实性，确保通信双方的身份，保障用户的隐私和安全。</p><h4 id="http-和-https-的区别" tabindex="-1">HTTP 和 HTTPS 的区别 <a class="header-anchor" href="#http-和-https-的区别" aria-label="Permalink to &quot;HTTP 和 HTTPS 的区别&quot;">​</a></h4><p><code>HTTP</code> 和 <code>HTTPS</code> 都是应用层协议，但 <code>HTTPS</code> 在 <code>HTTP</code> 的基础上增加了安全层，使得数据在传输过程中更加安全可靠。下面是 <code>HTTP</code> 和 <code>HTTPS</code> 的区别：</p><ol><li><p><code>HTTP</code> 使用明文传输数据，而 <code>HTTPS</code> 通过 <code>SSL/TLS</code> 加密数据传输；</p></li><li><p><code>HTTP</code> 的默认端口是 <code>80</code>，<code>HTTPS</code> 的默认端口是 <code>443</code>；</p></li><li><p><code>HTTP</code> 在通信过程中没有身份验证，而 <code>HTTPS</code> 通过 <code>SSL/TLS</code> 建立身份验证机制，可以防止身份被冒充；</p></li><li><p><code>HTTP</code> 数据传输速度更快，因为 <code>HTTPS</code> 增加了加密、解密和身份验证等额外的步骤，需要消耗更多的计算资源和时间；</p></li><li><p><code>HTTP</code> 使用的证书是申请成本较低的 <code>DV</code>（Domain Validation）证书，而 <code>HTTPS</code> 使用的证书是成本较高的 <code>EV</code>（Extended Validation）证书，可以提供更高的安全性和可信度。</p></li></ol><p>总之，<code>HTTPS</code> 比 <code>HTTP</code> 更加安全可靠，但在性能方面会有一定的损失。因此，在对安全性要求较高的场合，应该使用 <code>HTTPS</code>。</p><h4 id="https-协议的优缺点" tabindex="-1">HTTPS 协议的优缺点 <a class="header-anchor" href="#https-协议的优缺点" aria-label="Permalink to &quot;HTTPS 协议的优缺点&quot;">​</a></h4><p><code>HTTPS</code> 协议相比 <code>HTTP</code> 协议，具有以下优点和缺点：</p><p><strong>优点：</strong></p><ol><li><p>安全性高：<code>HTTPS</code> 协议利用 <code>SSL/TLS</code> 加密传输数据，能够有效地保障数据的安全性，可以防止数据被窃取、篡改、劫持等攻击。</p></li><li><p>防止中间人攻击：<code>HTTPS</code> 采用了证书机制，能够有效地防止中间人攻击。</p></li><li><p>提高网站的信誉度：<code>HTTPS</code> 协议能够保证网站的真实性和完整性，让用户更加信任网站，从而提高了网站的信誉度。</p></li><li><p>支持更多的浏览器和搜索引擎：现在的浏览器和搜索引擎都支持 <code>HTTPS</code> 协议，使用 <code>HTTPS</code> 协议能够让网站更好的展示在搜索结果中，提高曝光率。</p></li></ol><p><strong>缺点：</strong></p><ol><li><p>加密、解密过程会消耗更多的计算资源和时间，会降低服务器的性能，增加服务器的负担。</p></li><li><p>证书需要向 <code>CA</code> 机构购买，成本较高，不是所有的网站都能够承受。</p></li><li><p><code>HTTPS</code> 协议对缓存的支持不够好，会导致网站的访问速度较慢，需要额外的服务器资源来支持 <code>HTTPS</code> 的加密和解密过程。</p></li><li><p><code>HTTPS</code> 协议无法缓存静态文件，对于一些大文件的下载，<code>HTTPS</code> 的效率并不是很高。</p></li></ol><p>综上所述，<code>HTTPS</code> 协议虽然有一些缺点，但是其安全性和信誉度优势明显，对于一些需要保障数据安全的网站和交易场景，采用 <code>HTTPS</code> 协议是必要的。</p><h3 id="状态码" tabindex="-1">状态码 <a class="header-anchor" href="#状态码" aria-label="Permalink to &quot;状态码&quot;">​</a></h3><p><code>HTTP</code> 的状态码用于表示服务器处理请求的结果:</p><ul><li><code>1xx</code>：信息提示，表示请求已被接受，需要继续处理。</li><li><code>2xx</code>：成功，表示请求已被成功处理和接受。</li><li><code>3xx</code>：重定向，表示需要进行进一步操作才能完成请求。</li><li><code>4xx</code>：客户端错误，表示请求包含错误或无法被处理。</li><li><code>5xx</code>：服务器错误，表示服务器在尝试处理请求时发生了错误。</li></ul><h4 id="常见状态码" tabindex="-1">常见状态码 <a class="header-anchor" href="#常见状态码" aria-label="Permalink to &quot;常见状态码&quot;">​</a></h4><ul><li><code>200</code> OK：客户端请求成功</li><li><code>301</code> Moved Permanently：所请求的页面已经永久重定向至新的 <code>URL</code></li><li><code>302</code> Found：所请求的页面已经临时重定向至新的 <code>URL</code></li><li><code>304</code> Not Modified：未修改。</li><li><code>403</code> Forbidden：对请求页面的访问被禁止</li><li><code>404</code> Not Found：请求资源不存在</li><li><code>500</code> Internal Server Error：服务器发生不可预期的错误原来缓冲的文档还可以继续使用</li><li><code>503</code> Server Unavailable：请求未完成，服务器临时过载或宕机，一段时间后可恢复正常</li></ul><h4 id="更多状态码" tabindex="-1">更多状态码 <a class="header-anchor" href="#更多状态码" aria-label="Permalink to &quot;更多状态码&quot;">​</a></h4><ul><li><p><code>1xx</code>（临时响应）表示临时响应并需要请求者继续执行操作的状态码</p><ul><li><code>100</code>：继续，服务器已经接收到请求头，并且客户端应该继续发送请求体（通常用于 <code>POST</code> 请求）。</li><li><code>101</code>：切换协议，请求者已要求服务器切换协议，服务器已确认并准备切换</li></ul></li><li><p><code>2xx</code>（成功）表示成功处理了请求的状态码</p><ul><li><code>200</code>：成功，服务器已经成功处理了请求</li><li><code>201</code>：已创建，请求成功并且服务器创建了新的资源</li><li><code>202</code>：已接受，服务器已接受请求，但尚未处理</li><li><code>203</code>：非授权信息，服务器已经成功处理了请求，但返回的信息可能来自另一来源</li><li><code>204</code>：无内容，服务器成功处理了请求，但没有返回任何内容</li><li><code>205</code>：重置内容，服务器成功处理了请求，但没有返回任何内容</li></ul></li><li><p><code>3xx</code>（重定向）表示要完成请求，需要进一步操作；通常，这些状态代码用来重定向</p><ul><li><code>300</code>：多种选择，针对请求，服务器可执行多种操作。服务器可根据请求者（<code>user agent</code>）选择一项操作，或提供操作列表供请求者选择</li><li><code>301</code>：永久移动，请求的网页已永久移动到新位置。服务器返回此响应（对 <code>GET</code> 或 <code>HEAD</code> 请求的响应）时，会自动将请求者转到新位置</li><li><code>302</code>：临时移动，服务器目前从不同位置的网页响应请求，但请求者应继续使用原有位置来进行以后的请求</li><li><code>303</code>：查看其它位置，请求者应当对不同的位置使用单独的 <code>GET</code> 请求来检索响应时，服务器返回此代码</li><li><code>304</code>：未修改，自上次请求后，请求的网页未修改过。服务器返回此响应，不会返回网页的内容</li><li><code>305</code>：使用代理，请求者只能使用代理访问请求的网页。如果服务器返回此响应，还表示请求者应使用代理</li><li><code>307</code>：临时性重定向，服务器目前从不同位置的网页响应请求，但请求者应继续使用原有的位置来进行以后的请求</li></ul></li><li><p><code>4xx</code>（请求错误）这些状态码表示请求可能出错，妨碍了服务器的处理</p><ul><li><code>400</code>：错误请求，服务器不理解请求的语法</li><li><code>401</code>：未授权，请求要求身份验证。对于需要登录的网页，服务器可能返回此响应</li><li><code>403</code>：禁止，服务器拒绝请求</li><li><code>404</code>：未找到，服务器找不到请求的网页</li><li><code>405</code>：方法禁用，禁用请求中指定的方法</li><li><code>406</code>：不接受，无法使用请求的内容特性响应请求的网页</li><li><code>407</code>：需要代理授权，此状态码与 <code>401</code>（未授权）类似，但指定请求者应当授权使用代理</li><li><code>408</code>：请求超时，服务器等候请求时发生超时</li><li><code>410</code>：已删除，如果请求的资源已永久删除，服务器就会返回此响应</li><li><code>413</code>：请求实体过大，服务器无法处理请求，因为请求实体过大，超出了服务器的处理能力</li><li><code>414</code>：请求的 <code>URI</code> 过长，请求的 <code>URI</code>（通常为网址）过长，服务器无法处理</li></ul></li><li><p><code>5xx</code>（服务器错误）这些状态码表示服务器在尝试处理请求时发生内部错误。这些错误可能是服务器本身的错误，而不是请求出错</p><ul><li><code>500</code>：服务器内部错误，服务器遇到错误，无法完成请求</li><li><code>501</code>：尚未实施，服务器不具备完成请求的功能。例如，服务器无法识别请求方法时可能会返回此代码</li><li><code>502</code>：错误网关，服务器作为网关或代理，从上游服务器无法收到无效响应</li><li><code>503</code>：服务器不可用，服务器目前无法使用（由于超载或者停机维护）。通常，这只是暂时状态</li><li><code>504</code>：网关超时，服务器作为网关代理，但是没有及时从上游服务器收到请求</li><li><code>505</code>：<code>HTTP</code> 版本不受支持，服务器不支持请求中所用的 <code>HTTP</code> 协议版本</li></ul></li></ul><h4 id="_304状态码过程" tabindex="-1">304状态码过程 <a class="header-anchor" href="#_304状态码过程" aria-label="Permalink to &quot;304状态码过程&quot;">​</a></h4><ol><li><p>浏览器请求资源时，先检查资源的 <code>Expires</code> 和 <code>Cache-Control</code> 值，如果缓存仍然有效，则直接使用缓存，返回状态码 <code>200</code>，并在响应头中添加 <code>from cache</code> 字样，不会请求数据。</p></li><li><p>如果缓存失效，浏览器发送带有 <code>If-None-Match</code> 和 <code>If-Modified-Since</code> 头的条件请求到服务器，请求头中的 <code>If-None-Match</code> 值是上一次请求返回的 <code>ETag</code> 值，<code>If-Modified-Since</code> 是上一次请求返回的 <code>Last-Modified</code> 值。</p></li><li><p>服务器收到条件请求后，检查资源的 <code>ETag</code> 和 <code>Last-Modified</code> 值是否匹配，如果匹配，则表示资源没有更新，返回状态码 <code>304</code>，告诉浏览器可以直接使用缓存。</p></li><li><p>如果资源已更新，则服务器返回新的资源，状态码为 <code>200</code>，并在响应头中添加新的 <code>ETag</code> 和 <code>Last-Modified</code> 值，浏览器会更新缓存，并在下一次请求中使用新的缓存。</p></li></ol><p>总之，<code>HTTP 304</code> 状态码的过程是一种优化缓存机制的方式，减少网络带宽和服务器负载。通过比较资源的 <code>ETag</code> 和 <code>Last-Modified</code> 值，避免了不必要的数据传输，提高了资源请求的效率。</p><h3 id="请求跨域问题" tabindex="-1">请求跨域问题 <a class="header-anchor" href="#请求跨域问题" aria-label="Permalink to &quot;请求跨域问题&quot;">​</a></h3><p>跨域问题指的是：浏览器限制了当前网页从不同的域名、端口、协议访问另一个网站的资源的限制。浏览器是基于同源策略来限制跨域访问的。</p><p>同源策略指的是：<strong>协议</strong>、<strong>域名</strong>、<strong>端口号</strong>必须完全相同</p><p>解决跨域指的是：通过各种方式，避开浏览器的安全限制</p><p>常见的跨域解决方案有以下几种：</p><ol><li><p><code>JSONP</code>：通过动态创建 <code>&lt;script&gt;</code> 标签，通过 <code>src</code> 属性加载一个 <code>API</code>，并在 <code>url</code> 参数中携带回调函数名，服务端返回一个执行该回调函数的 <code>JavaScript</code> 脚本。<code>JSONP</code> 仅支持 <code>GET</code> 请求，且只能用于跨域获取数据，无法实现向服务器提交数据。</p></li><li><p><code>CORS</code>：服务器设置响应头中的 <code>Access-Control-Allow-Origin</code> 字段，允许指定的域名跨域访问该资源。使用 <code>CORS</code> 需要服务器端支持，且需要前端进行额外的配置，可以支持 <code>GET/POST</code> 等请求类型。</p></li><li><p><code>代理服务器</code>：前端请求自己的服务器，自己的服务器再去请求目标服务器，最后将目标服务器的响应返回给前端。由于是同源请求，不存在跨域问题，但需要在自己的服务器上进行配置。</p></li><li><p><code>WebSocket</code>：<code>WebSocket</code> 协议是一种在单个 <code>TCP</code> 连接上进行全双工通信的协议，它不受同源策略的限制。通过在客户端和服务器之间建立 <code>WebSocket</code> 连接，可以在跨域情况下进行实时通信。</p></li><li><p><code>postMessage</code>：可以在跨域的窗口之间发送消息，通过对消息的监听来实现跨域通信。</p></li></ol><h2 id="tcp" tabindex="-1">TCP <a class="header-anchor" href="#tcp" aria-label="Permalink to &quot;TCP&quot;">​</a></h2><p><strong>TCP/IP网络模型</strong>是互联网最基本的通信模型，它是由两个协议簇（Protocol Suite）组成：<code>TCP</code>（传输控制协议）和 <code>IP</code>（网际协议）。</p><p><code>TCP/IP</code> 网络模型共分为四层，分别为：</p><ol><li><p>应用层（Application Layer）：处理特定应用程序的协议，例如 <code>HTTP</code>、<code>FTP</code>、<code>SMTP</code> 等。</p></li><li><p>传输层（Transport Layer）：提供端到端的接口，负责向两台主机中的应用程序提供通信服务，常用协议有 <code>TCP</code>、<code>UDP</code> 等。</p></li><li><p>网络层（Internet Layer）：处理网络上的流量路由和寻址，主要包括 <code>IP</code> 协议。</p></li><li><p>数据链路层（Link Layer）：负责处理网络物理设备和网络之间的数据传输，常用协议有 <code>Ethernet</code>、<code>PPP</code> 等。</p></li></ol><p><code>TCP/IP</code> 网络模型与 <code>OSI</code> 网络模型相似，但是它们之间存在一些差异。<code>TCP/IP</code> 网络模型是一个更加实用的模型，主要应用于互联网和局域网等通信网络。</p><h3 id="tcp-三次握手" tabindex="-1">TCP 三次握手 <a class="header-anchor" href="#tcp-三次握手" aria-label="Permalink to &quot;TCP 三次握手&quot;">​</a></h3><ol><li><p>第一次握手：客户端向服务器发送 <code>SYN</code> 包（<code>SYN=j</code>）并进入 <code>SYN_SENT</code> 状态，等待服务器确认。</p></li><li><p>第二次握手：服务器收到客户端的 <code>SYN</code> 包后，确认客户端的 <code>SYN</code>（<code>ACK=j+1</code>），并向客户端发送一个自己的 <code>SYN</code> 包（<code>SYN=k</code>），即 <code>SYN+ACK</code> 包，此时服务器进入 <code>SYN_RECV</code> 状态。</p></li><li><p>第三次握手：客户端收到服务器的 <code>SYN+ACK</code> 包后，向服务器发送确认包 <code>ACK</code>（<code>ACK=k+1</code>），此包发送完毕，客户端和服务器进入 <code>ESTABLISHED</code> 状态，<code>TCP</code> 连接建立成功。</p></li></ol><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>握手过程中传送的包里不包含数据，三次握手完毕后，客户端与服务器才正式开始传送数据。</p></div><h3 id="tcp-四次挥手" tabindex="-1">TCP 四次挥手 <a class="header-anchor" href="#tcp-四次挥手" aria-label="Permalink to &quot;TCP 四次挥手&quot;">​</a></h3><ol><li><p>客户端发送连接释放报文段（<code>FIN=1，seq=x</code>），并进入 <code>FIN_WAIT_1</code> 状态，等待服务端确认。</p></li><li><p>服务端收到连接释放报文段后，发送确认报文段（<code>ACK=1，ack=x+1</code>），进入 <code>CLOSE_WAIT</code> 状态，等待客户端发送连接释放报文段。</p></li><li><p>如果服务端有要发送的数据，会先将数据发送完毕，然后发送连接释放报文段（<code>FIN=1，seq=y</code>），进入 <code>LAST_ACK</code> 状态，等待客户端确认。</p></li><li><p>客户端收到连接释放报文段后，发送确认报文段（<code>ACK=1，ack=y+1</code>），进入 <code>TIME_WAIT</code> 状态，等待 <code>2MSL</code> 后进入 <code>CLOSED</code> 状态。<code>2MSL</code> 是为了确保服务端收到了确认报文段，如果没有收到则会重传连接释放报文段。</p></li><li><p>服务端收到客户端发送的确认报文段后，进入 <code>CLOSED</code> 状态，释放连接。</p></li><li><p>客户端等待 <code>2MSL</code> 后，确认服务端已经收到了确认报文段，进入 <code>CLOSED</code> 状态，释放连接。</p></li></ol><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>总结来说，<code>TCP</code> 四次挥手过程的目的是为了确保客户端和服务端都知道连接已经关闭，并且在关闭连接之前，双方都有机会传递完所有的数据。在这个过程中，双方都会进入一些状态来等待对方的确认和数据传输。</p></div><h3 id="tcp-和-udp-的区别" tabindex="-1">TCP 和 UDP 的区别 <a class="header-anchor" href="#tcp-和-udp-的区别" aria-label="Permalink to &quot;TCP 和 UDP 的区别&quot;">​</a></h3><p><code>TCP</code> 和 <code>UDP</code> 是传输层协议，用于在网络上传输数据，但它们之间有几个重要的区别。</p><ol><li><p>可靠性：<code>TCP</code> 是可靠的，它确保数据包的正确性和完整性。它使用三次握手建立连接，确认数据包的接收，并保证数据包的顺序。而 <code>UDP</code> 则是不可靠的，因为它不保证数据包的正确性、完整性和顺序。</p></li><li><p>连接：<code>TCP</code> 是面向连接的协议，建立连接、数据传输和释放连接都需要经过一定的过程。<code>UDP</code> 则是无连接的，发送端只是直接把数据包发送给接收端，不需要连接的建立和释放过程。</p></li><li><p>效率：<code>UDP</code> 比 <code>TCP</code> 快，因为它不需要建立连接和保证数据包的可靠传输。但是，由于 <code>UDP</code> 不保证数据包的可靠性和完整性，所以需要应用程序来负责处理这些问题。</p></li><li><p>应用场景：<code>TCP</code> 适用于需要可靠数据传输的应用程序，如文件传输、电子邮件、Web应用程序等。<code>UDP</code> 适用于需要快速数据传输的应用程序，如视频、音频、游戏等。</p></li></ol><p>总之，<code>TCP</code> 提供了可靠性和顺序控制，而 <code>UDP</code> 提供了快速传输和更少的开销。选择哪种协议取决于应用程序的需求和特点。</p><h3 id="tcp-粘包" tabindex="-1">TCP 粘包 <a class="header-anchor" href="#tcp-粘包" aria-label="Permalink to &quot;TCP 粘包&quot;">​</a></h3><p><code>TCP</code> 粘包是指：发送方发送的若干包数据到接收方接收时粘成一包，从接收缓冲区看，后一包数据的头紧接着前一包数据的尾。也就是说，多个数据包粘合在了一起形成了一个粘包。</p><p><strong>出现原因：</strong></p><ol><li><p>发送方缓存数据包过多或传输速度过快，导致多个数据包一次性发送。</p></li><li><p>接收方读取数据包的方式不当，比如采用固定长度的方式读取数据，而不考虑数据包之间的边界问题。</p></li><li><p>网络拥塞、传输延迟</p></li></ol><p><strong>解决对策：</strong></p><ol><li><p>定长包：发送方在发送数据时，将每个数据包的大小固定为一个定值，接收方按照这个固定的大小来接收数据包。</p></li><li><p>分隔符：发送方在每个数据包的结尾添加一个特殊的分隔符，接收方在接收数据时按照这个分隔符来区分不同的数据包。</p></li><li><p>包头+包体：在每个数据包中添加包头和包体，包头用来描述包体的长度和其他属性，接收方在接收数据时先读取包头，然后根据包头中的长度信息来读取包体。</p></li><li><p>应用层协议：应用层协议可以自定义数据的格式，发送方和接收方都按照这个协议来解析数据包。</p></li></ol><h2 id="浏览器的缓存机制" tabindex="-1">浏览器的缓存机制 <a class="header-anchor" href="#浏览器的缓存机制" aria-label="Permalink to &quot;浏览器的缓存机制&quot;">​</a></h2><p>浏览器缓存机制可以分为强制缓存和协商缓存两种方式。</p><ul><li>强制缓存：</li></ul><p>当浏览器第一次请求资源时，服务器返回的响应头中会包含 <code>Cache-Control</code> 和 <code>Expires</code> 字段，用于控制资源的缓存。浏览器在接收到资源后，会将其保存到本地，并在下一次请求该资源时，先判断本地缓存是否过期，如果未过期，则直接从本地缓存读取资源，不再向服务器发起请求。</p><ul><li>协商缓存：</li></ul><p>当浏览器判断本地缓存已经过期时，会向服务器发起请求，服务器返回的响应头中会包含 <code>Last-Modified</code> 和 <code>ETag</code> 字段，用于标识资源的最后修改时间和唯一标识。浏览器在接收到资源后，会将其保存到本地，并在下一次请求该资源时，先向服务器发起请求，请求头中包含上一次响应头中返回的 <code>Last-Modified</code> 和 <code>ETag</code> 值，服务器会根据这些值判断该资源是否有更新，如果没有更新，则返回 <code>304</code> 状态码，并告诉浏览器可以从本地缓存中获取该资源；如果有更新，则返回新的资源内容和响应头，并将其保存到本地缓存。</p><h2 id="客户端与服务端长连接" tabindex="-1">客户端与服务端长连接 <a class="header-anchor" href="#客户端与服务端长连接" aria-label="Permalink to &quot;客户端与服务端长连接&quot;">​</a></h2><p>下面是一些客户端与服务端长连接的方式以及它们的优缺点：</p><ol><li><code>HTTP</code> 长连接</li></ol><p>优点：</p><ul><li>可以重用一个 <code>TCP</code> 连接，减少了每次请求时建立 <code>TCP</code> 连接的开销。</li><li>适用于轻量级的数据交换，比如 <code>Web</code> 资源的传输。</li><li>由于使用 <code>HTTP</code> 协议，因此兼容性较好，可用于浏览器和服务器之间的通信。</li></ul><p>缺点：</p><ul><li>无法实现服务器端主动推送数据，需要客户端轮询或者使用 <code>Comet</code> 等技术来模拟长连接。</li><li>长时间保持连接会占用服务器的资源，如果同时有大量客户端连接，则会造成服务器压力过大。</li><li><code>HTTP</code> 协议的头部信息比较冗余，增加了数据传输的开销。</li></ul><ol start="2"><li><code>WebSocket</code> 长连接</li></ol><p>优点：</p><ul><li>建立在 <code>HTTP</code> 协议之上，与 <code>HTTP</code> 协议兼容，因此能够穿透大多数防火墙和代理服务器。</li><li>可以实现服务器端主动推送数据，可以用于实时通信、在线游戏等场景。</li><li>采用二进制传输，传输效率高。</li><li><code>WebSocket</code> 协议采用了基于帧的传输方式，消息的边界明确，便于解析。</li></ul><p>缺点：</p><ul><li>对服务器端的性能要求较高，需要保持大量的连接和维护状态，服务器压力较大。</li><li>长时间保持连接会占用服务器的资源，如果同时有大量客户端连接，则会造成服务器压力过大。</li><li>需要客户端和服务器端都支持 <code>WebSocket</code> 协议。</li></ul><ol start="3"><li><code>TCP</code> 长连接</li></ol><p>优点：</p><ul><li>直接建立在 <code>TCP</code> 层，没有 <code>HTTP</code> 协议头的开销，传输效率高。</li><li>可以实现服务器端主动推送数据。</li><li>对于较大量级的数据交换，<code>TCP</code> 长连接的效率比 <code>HTTP</code> 长连接要高。</li></ul><p>缺点：</p><ul><li>需要客户端和服务器端都支持 <code>TCP</code> 协议。</li><li><code>TCP</code> 长连接需要维护连接状态，因此对服务器的性能要求较高。</li><li>如果同时有大量客户端连接，则会造成服务器压力过大。</li></ul><div class="tip custom-block"><p class="custom-block-title">TIP</p><ul><li>对于简单的 <code>Web</code> 应用，使用 <code>HTTP</code> 长连接即可满足需求；</li><li>对于实时通信或在线游戏等场景，可以选择 <code>WebSocket</code> 长连接；</li><li>而对于大量数据交换的场景，<code>TCP</code> 长连接可能更为适合。</li></ul></div><h2 id="socket-建立网络连接" tabindex="-1">Socket 建立网络连接 <a class="header-anchor" href="#socket-建立网络连接" aria-label="Permalink to &quot;Socket 建立网络连接&quot;">​</a></h2><p>使用 <code>Socket</code> 建立网络连接的步骤如下：</p><ol><li><p>创建 <code>Socket</code> 对象：客户端和服务端都需要创建 <code>Socket</code> 对象。客户端创建 <code>Socket</code> 对象时，需要指定服务端的 <code>IP</code> 地址和端口号；服务端创建 <code>Socket</code> 对象时，只需要指定端口号。</p></li><li><p>连接服务端：客户端需要调用 <code>Socket</code> 对象的 <code>connect()</code> 方法连接服务端。服务端不需要调用该方法，因为服务端是被动的，等待客户端连接即可。</p></li><li><p>获取输入输出流：连接成功后，客户端和服务端都需要获取对应的输入输出流，用于数据的读写。</p></li><li><p>进行数据的读写：通过输入输出流进行数据的读写，客户端和服务端都可以发送和接收数据。</p></li><li><p>关闭连接：使用完毕后，需要关闭 <code>Socket</code> 连接，释放资源。</p></li></ol><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>在使用 <code>Socket</code> 进行网络编程时，可能会抛出各种异常，如 <code>SocketException</code>、<code>IOException</code> 等，需要进行异常处理。</p></div><h2 id="对称加密和非对称加密" tabindex="-1">对称加密和非对称加密 <a class="header-anchor" href="#对称加密和非对称加密" aria-label="Permalink to &quot;对称加密和非对称加密&quot;">​</a></h2><p>非对称加密和对称加密是两种常用的加密方式。</p><ul><li><p>对称加密是指发送方和接收方使用同一把密钥进行加密和解密。这种加密方式速度较快，但是密钥必须安全地传输，如果密钥泄露了，那么加密就失去了意义。</p></li><li><p>非对称加密是指使用一对公开密钥和私有密钥进行加密和解密。公开密钥是公开的，任何人都可以获得，用于加密数据；私有密钥只有私有密钥的拥有者可以使用，用于解密数据。非对称加密方式相对对称加密更加安全，因为即使攻击者获得了公开密钥，也无法解密数据，必须拥有私有密钥才能进行解密。</p></li></ul><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>通常，在实际应用中，对称加密和非对称加密会结合使用。例如，使用对称加密算法加密数据，然后使用非对称加密算法加密对称密钥，这样可以保证数据的安全性，并且在保证安全性的前提下提高效率。</p></div><p><strong>对称加密的特点：</strong></p><ul><li><p>对称加密使用相同的密钥进行加密和解密。</p></li><li><p>加密和解密的速度非常快。</p></li><li><p>密钥必须安全地传输给接收方，否则容易被拦截。</p></li><li><p>密钥管理非常困难，特别是在多个用户之间共享密钥时。</p></li></ul><p><strong>非对称加密的特点：</strong></p><ul><li><p>非对称加密使用两个密钥进行加密和解密，分别为公钥和私钥。</p></li><li><p>加密和解密的速度较慢。</p></li><li><p>公钥可以公开发布，私钥必须严格保密。</p></li><li><p>密钥管理相对容易，因为每个用户都有自己的密钥对。</p></li></ul><p><strong>它们之间的区别：</strong></p><ul><li><p>对称加密和非对称加密的密钥数量不同，对称加密使用相同的密钥进行加密和解密，而非对称加密使用两个密钥，分别为公钥和私钥。</p></li><li><p>加密和解密速度不同，对称加密速度非常快，而非对称加密速度相对较慢。</p></li><li><p>密钥的管理方式不同，对称加密的密钥管理非常困难，而非对称加密的密钥管理相对容易。</p></li><li><p>对称加密相对来说不太安全，因为密钥需要安全地传输给接收方，否则可能被拦截，而非对称加密相对较安全，因为公钥可以公开发布。</p></li></ul><h2 id="http1、http2、http3" tabindex="-1">HTTP1、HTTP2、HTTP3 <a class="header-anchor" href="#http1、http2、http3" aria-label="Permalink to &quot;HTTP1、HTTP2、HTTP3&quot;">​</a></h2><p><code>HTTP</code> (Hypertext Transfer Protocol) 是一种用于客户端和服务器之间进行通信的协议。在过去几十年中，<code>HTTP</code> 已经经历了多次重大更新，其中最重要的三个版本是 <code>HTTP1</code>、<code>HTTP2</code> 和 <code>HTTP3</code> 。它们之间的区别如下：</p><ol><li><p><code>HTTP1</code>：<code>HTTP1.0</code> 最初发布于 <code>1996</code> 年，然后在 <code>1999</code> 年被 <code>HTTP1.1</code> 取代。<code>HTTP1.x </code> 是一种基于文本的协议，使用明文传输数据，不支持请求和响应的多路复用，每个请求都需要建立一个新的 <code>TCP</code> 连接。这导致了一些性能瓶颈，例如延迟和带宽限制。</p></li><li><p><code>HTTP2</code>：<code>HTTP2</code> 在 <code>2015</code> 年发布，是 <code>HTTP1.x</code> 的升级版。它引入了二进制协议，支持请求和响应的多路复用，可以在一个 <code>TCP</code> 连接上同时发送多个请求，降低了延迟和提高了带宽利用率。此外，<code>HTTP2</code> 还支持服务器推送，可以在客户端请求之前将资源推送到客户端缓存，从而提高性能。</p></li><li><p><code>HTTP3</code>：<code>HTTP3</code> 是最新的 <code>HTTP</code> 协议，于 <code>2020</code> 年发布。它基于 <code>QUIC</code>（Quick UDP Internet Connections）协议，使用 <code>UDP</code> 而不是 <code>TCP</code> 来传输数据。由于 <code>UDP</code> 支持更高的并发连接和更低的延迟，<code>HTTP3</code> 可以更快地传输数据，并支持请求和响应的多路复用。此外，<code>HTTP3</code> 还支持 <code>0-RTT</code>（Zero Round Trip Time）握手，可以减少建立连接所需的时间。</p></li></ol><p><code>HTTP1.1</code> 的优点：</p><ul><li>兼容性好：<code>HTTP1.1</code> 被广泛支持和采用。</li><li>可缓存性：<code>HTTP1.1</code> 支持多种缓存技术，可以缓存网页，提高网页加载速度。</li><li>资源异步加载：使用 <code>HTTP1.1</code> 可以通过在页面中嵌入多个资源链接的方式异步加载资源，提高了页面的并发度和渲染速度。</li></ul><p><code>HTTP1.1</code> 的缺点：</p><ul><li>队头阻塞：<code>HTTP1.1</code> 使用的是串行的请求和响应方式，如果某个请求响应慢，后续的请求需要等待，会出现队头阻塞的问题。</li><li>无状态：<code>HTTP1.1</code> 协议本身无状态，需要使用 <code>Cookie</code> 等技术来实现状态管理。</li><li>头部冗余：<code>HTTP1.1</code> 的头部信息没有压缩，每次请求和响应都需要重复传输相同的头部信息，导致传输数据量增大。</li></ul><p><code>HTTP2</code> 的优点：</p><ul><li>多路复用：<code>HTTP2</code> 使用二进制协议，支持多路复用，可以在一个连接上同时处理多个请求和响应。</li><li>首部压缩：<code>HTTP2</code> 使用首部压缩技术，可以减少请求和响应的头部信息传输量，提高了传输效率。</li><li>服务器推送：<code>HTTP2</code> 支持服务器推送技术，可以在客户端请求前主动向客户端推送相应资源，提高了响应速度和性能。</li></ul><p><code>HTTP2</code> 的缺点：</p><ul><li>依赖 <code>HTTPS</code>：<code>HTTP2</code> 协议必须依赖 <code>TLS</code> 协议，需要使用 <code>HTTPS</code> 传输数据。</li><li>突发流量：多路复用可以并发处理多个请求和响应，但也会导致某个请求耗费过多的时间，影响其他请求的响应速度。</li><li>资源消耗：<code>HTTP2</code> 对于每个连接都需要维护状态，资源消耗较大。</li></ul><p><code>HTTP3</code> 的优点：</p><ul><li>基于 <code>QUIC</code> 协议：<code>HTTP3</code> 基于 <code>QUIC</code> 协议，具有更好的安全性和传输效率。</li><li>集成了 <code>TLS</code>：<code>HTTP3</code> 集成了 <code>TLS</code>，保证了数据的安全性。</li><li>抗干扰：<code>HTTP3</code> 通过使用 <code>UDP</code> 协议，支持快速重传和自适应拥塞控制，抵抗网络干扰。</li></ul><p><code>HTTP3</code> 的缺点：</p><ul><li>兼容性：<code>HTTP3</code> 的兼容性较差，需要客户端和服务器端都支持 <code>HTTP3</code> 协议。</li><li>连接建立：<code>HTTP3</code> 协议需要建立多个连接来提高传输效率，增加了连接建立的复杂度。</li><li>难以调试：<code>HTTP3</code> 的调试工具还不够成熟，调试过程比较困难。</li></ul><div class="warning custom-block"><p class="custom-block-title">WARNING</p><ul><li><code>HTTP2</code> 和 <code>HTTP3</code> 是对 <code>HTTP1.1</code> 的升级和改进，不是对 <code>HTTP1.0</code> 的重写。</li><li>虽然 <code>HTTP1.1</code> 是 <code>HTTP1.0</code> 的改进版本，但 <code>HTTP2</code> 和 <code>HTTP3</code> 是对 <code>HTTP1.1</code> 的更进一步的改进和升级。</li><li><code>HTTP1.1</code> 相对于 <code>HTTP1.0</code> 的改进主要是在持久连接、管线化、缓存等方面，而 <code>HTTP2</code> 和 <code>HTTP3</code> 则在多路复用、头部压缩、流量控制等方面有了很大的改进。</li></ul></div><h2 id="网络安全攻击类型" tabindex="-1">网络安全攻击类型 <a class="header-anchor" href="#网络安全攻击类型" aria-label="Permalink to &quot;网络安全攻击类型&quot;">​</a></h2><p><code>XSS</code>、<code>CSRF</code> 和 <code>DDoS</code> 攻击都是常见的网络安全攻击类型，以下是它们的原理和避免方式：</p><ol><li><code>XSS</code>（跨站脚本攻击）：</li></ol><p><code>XSS</code> 攻击是指攻击者利用网站漏洞，在页面中注入恶意脚本，当用户访问包含这些恶意脚本的页面时，脚本会在用户浏览器中执行，进而盗取用户的敏感信息。<code>XSS</code> 攻击主要有两种类型：存储型和反射型。</p><p>避免方式：</p><ul><li>输入验证：对用户输入的数据进行校验和过滤。</li><li>输出编码：对输出到页面的数据进行编码，避免恶意脚本被执行。</li><li><code>Cookie</code> 安全：将 <code>cookie</code> 标记为 <code>HttpOnly</code>，使得只有在服务端可以访问，而客户端的 <code>JavaScript</code> 无法访问。</li></ul><ol start="2"><li><code>CSRF</code>（跨站请求伪造）：</li></ol><p><code>CSRF</code> 攻击是指攻击者通过各种方式欺骗用户在另一个网站上执行恶意操作，进而完成攻击。攻击者通过伪造用户的身份，向目标网站发起请求，实现攻击目的。</p><p>避免方式：</p><ul><li>验证码：在敏感操作上添加验证码，防止攻击者利用脚本发起攻击。</li><li>随机令牌：在敏感操作中添加随机的令牌，防止攻击者伪造用户身份。</li><li><code>Referer</code> 检查：检查请求来源，防止攻击者通过直接构造请求来攻击。</li></ul><ol start="3"><li><code>DDoS</code>（分布式拒绝服务攻击）：</li></ol><p><code>DDoS</code> 攻击是指攻击者利用大量的计算机或设备向目标服务器发起大量请求，占用服务器的带宽和资源，导致服务不可用。<code>DDoS</code> 攻击可以分为几种类型，如 <code>SYN Flood</code> 攻击、<code>UDP Flood</code> 攻击和 <code>HTTP Flood</code> 攻击等。</p><p>避免方式：</p><ul><li>流量清洗：使用专业的 <code>DDoS</code> 清洗设备，可以对流量进行过滤和清洗，防止攻击流量影响正常流量。</li><li>网络拓扑优化：合理优化网络拓扑，可以减轻 <code>DDoS</code> 攻击对网络的影响。</li><li>服务器防护：可以通过限制单个 <code>IP</code> 地址的最大连接数、使用防火墙、开启 <code>DDoS</code> 防护等方式，提高服务器的防护能力。</li></ul>`,165),t=[i];function a(p,T,r,s,n,P){return o(),c("div",null,t)}const H=e(l,[["render",a]]);export{h as __pageData,H as default};
