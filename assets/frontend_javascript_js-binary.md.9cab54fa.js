import{_ as s,c as a,o as n,a as l}from"./app.b89d2cac.js";const e="/vite-press/assets/img.2e8a66d0.png",o="/vite-press/assets/img_1.a3f045ed.png",p="/vite-press/assets/img_2.217e4e38.png",u=JSON.parse('{"title":"JS二进制","description":"","frontmatter":{},"headers":[{"level":2,"title":"1、Blob","slug":"_1、blob","link":"#_1、blob","children":[{"level":3,"title":"Blob创建","slug":"blob创建","link":"#blob创建","children":[]},{"level":3,"title":"Blob分片","slug":"blob分片","link":"#blob分片","children":[]}]},{"level":2,"title":"2、File","slug":"_2、file","link":"#_2、file","children":[{"level":3,"title":"File获取","slug":"file获取","link":"#file获取","children":[]},{"level":3,"title":"File属性","slug":"file属性","link":"#file属性","children":[]},{"level":3,"title":"FileList","slug":"filelist","link":"#filelist","children":[]}]},{"level":2,"title":"3、FileReader","slug":"_3、filereader","link":"#_3、filereader","children":[{"level":3,"title":"FileReader属性","slug":"filereader属性","link":"#filereader属性","children":[]},{"level":3,"title":"FileReader方法","slug":"filereader方法","link":"#filereader方法","children":[]},{"level":3,"title":"FileReader事件","slug":"filereader事件","link":"#filereader事件","children":[]}]},{"level":2,"title":"4、ArrayBuffer","slug":"_4、arraybuffer","link":"#_4、arraybuffer","children":[{"level":3,"title":"ArrayBuffer","slug":"arraybuffer","link":"#arraybuffer","children":[]},{"level":3,"title":"TypedArray","slug":"typedarray","link":"#typedarray","children":[]},{"level":3,"title":"DataView","slug":"dataview","link":"#dataview","children":[]}]},{"level":2,"title":"5、Object URL","slug":"_5、object-url","link":"#_5、object-url","children":[]},{"level":2,"title":"6、Base64","slug":"_6、base64","link":"#_6、base64","children":[{"level":3,"title":"Base64应用","slug":"base64应用","link":"#base64应用","children":[]}]},{"level":2,"title":"7、格式转换","slug":"_7、格式转换","link":"#_7、格式转换","children":[{"level":3,"title":"ArrayBuffer → blob","slug":"arraybuffer-→-blob","link":"#arraybuffer-→-blob","children":[]},{"level":3,"title":"ArrayBuffer → base64","slug":"arraybuffer-→-base64","link":"#arraybuffer-→-base64","children":[]},{"level":3,"title":"base64 → blob","slug":"base64-→-blob","link":"#base64-→-blob","children":[]},{"level":3,"title":"blob → ArrayBuffer","slug":"blob-→-arraybuffer","link":"#blob-→-arraybuffer","children":[]},{"level":3,"title":"const objectUrl = URL.createObjectURL(blob);","slug":"const-objecturl-url-createobjecturl-blob","link":"#const-objecturl-url-createobjecturl-blob","children":[]}]}],"relativePath":"frontend/javascript/js-binary.md","lastUpdated":1677576113000}'),r={name:"frontend/javascript/js-binary.md"},t=l('<h1 id="js二进制" tabindex="-1">JS二进制 <a class="header-anchor" href="#js二进制" aria-hidden="true">#</a></h1><blockquote><p>Blob、File、FileReader、ArrayBuffer、Base64</p></blockquote><p><img src="'+e+`" alt="img.png"></p><h2 id="_1、blob" tabindex="-1">1、Blob <a class="header-anchor" href="#_1、blob" aria-hidden="true">#</a></h2><p>Blob 全称为 <code>binary large object</code> ，即二进制大对象，它是 <code>JavaScript</code> 中的一个对象，表示原始的类似文件的数据。下面是 <code>MDN</code> 中对 <code>Blob</code> 的解释：</p><blockquote><p>Blob 对象表示一个不可变、原始数据的类文件对象。它的数据可以按文本或二进制的格式进行读取，也可以转换成 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/ReadableStream" target="_blank" rel="noreferrer">ReadableStream</a> 来用于数据操作。</p></blockquote><p>实际上，<code>Blob</code> 对象是包含有只读原始数据的类文件对象。简单来说，<code>Blob</code> 对象就是一个 <strong>不可修改</strong> 的二进制文件。</p><h3 id="blob创建" tabindex="-1">Blob创建 <a class="header-anchor" href="#blob创建" aria-hidden="true">#</a></h3><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> size</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> type </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Blob</span><span style="color:#A6ACCD;">(array</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> options)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> blob </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Blob</span><span style="color:#A6ACCD;">([ </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Hello World</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;"> ]</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">type</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">text/plain</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(blob</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">size) </span><span style="color:#676E95;font-style:italic;">// 11</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(blob</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">type) </span><span style="color:#676E95;font-style:italic;">// &quot;text/plain&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> url </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> URL</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">createObjectURL</span><span style="color:#A6ACCD;">(blob)</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(url) </span><span style="color:#676E95;font-style:italic;">// blob:域名/uuid</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><ul><li>array：由 <code>ArrayBuffer</code>、<code>ArrayBufferView</code>、<code>Blob</code>、<code>DOMString</code> 等对象构成的，将会被放进 <code>Blob</code>；</li><li>options：可选的 <code>BlobPropertyBag</code> 字典，它可能会指定如下两个属性 <ul><li>type：默认值为 &quot;&quot;，表示将会被放入到 <code>blob</code> 中的数组内容的 <code>MIME</code> 类型。</li><li>endings：默认值为 &quot;transparent&quot;，用于指定包含行结束符 <code>\\n</code> 的字符串如何被写入，不常用。</li></ul></li></ul><table><thead><tr><th>MIME类型</th><th>描述</th></tr></thead><tbody><tr><td>text/plain</td><td>纯文本文档</td></tr><tr><td>text/html</td><td>HTML 文档</td></tr><tr><td>text/javascript</td><td>JavaScript 文件</td></tr><tr><td>text/css</td><td>CSS 文件</td></tr><tr><td>application/json</td><td>JSON文件</td></tr><tr><td>application/pdf</td><td>PDF文件</td></tr><tr><td>application/xml</td><td>XML 文件</td></tr><tr><td>image/jpeg</td><td>JPEG图像</td></tr><tr><td>image/png</td><td>PNG图像</td></tr><tr><td>image/gif</td><td>GIF 图像</td></tr><tr><td>image/svg+xml</td><td>SVG 图像</td></tr><tr><td>audio/mpeg</td><td>MP3 文件</td></tr><tr><td>video/mpeg</td><td>MP4 文件</td></tr></tbody></table><h3 id="blob分片" tabindex="-1">Blob分片 <a class="header-anchor" href="#blob分片" aria-hidden="true">#</a></h3><p>除了使用Blob()构造函数来创建blob 对象之外，还可以从 blob 对象中创建blob，也就是将 blob 对象切片。Blob 对象内置了 slice() 方法用来将 blob 对象分片，其语法如下：</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> instanceOfBlob </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Blob</span><span style="color:#A6ACCD;">([ </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Hello World</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> ]</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">type</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">text/plain</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// const blob = instanceOfBlob.slice([ start [, end [, contentType ]]]);</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> blob </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> instanceOfBlob</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">slice</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">5</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">text/plain</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> url </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> URL</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">createObjectURL</span><span style="color:#A6ACCD;">(blob)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="_2、file" tabindex="-1">2、File <a class="header-anchor" href="#_2、file" aria-hidden="true">#</a></h2><p>文件（File）接口提供有关文件的信息，并允许网页中的 JavaScript 访问其内容。实际上，File 对象是特殊类型的 Blob，且可以用在任意的 Blob 类型的 context 中。Blob 的属性和方法都可以用于 File 对象。</p><blockquote><p>注意：File 对象中只存在于浏览器环境中，在 Node.js 环境中不存在。</p></blockquote><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> file </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">File</span><span style="color:#A6ACCD;">([ str ]</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> fileName</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> options)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// const file = new File([\`&lt;div&gt;&lt;h1&gt;下载成功！&lt;/h1&gt;&lt;/div&gt;\`],{type:&#39;text/html&#39;})</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="file获取" tabindex="-1">File获取 <a class="header-anchor" href="#file获取" aria-hidden="true">#</a></h3><p>在 JavaScript 中，主要有两种方法来获取 File 对象：</p><ul><li><code>input</code> 元素上选择（onchange）文件后返回的 FileList 对象； <code>console.log(e.target.files)</code></li><li>文件拖放操作（ondrop，ondragover）生成的 DataTransfer 对象； <code>console.log(e.dataTransfer.files)</code></li></ul><h3 id="file属性" tabindex="-1">File属性 <a class="header-anchor" href="#file属性" aria-hidden="true">#</a></h3><p>每个 File 对象都包含文件的一些属性，这些属性都继承自 Blob 对象：</p><ul><li><code>lastModified</code>：引用文件最后修改日期，为自1970年1月1日0:00以来的毫秒数；</li><li><code>lastModifiedDate</code>：引用文件的最后修改日期；</li><li><code>name</code>：引用文件的文件名；</li><li><code>size</code>：引用文件的文件大小；</li><li><code>type</code>：文件的媒体类型（MIME）；</li><li><code>webkitRelativePath</code>：文件的路径或 URL。</li></ul><p>通常，我们在上传文件时，可以通过对比 <code>size</code> 属性来限制文件大小，通过对比 <code>type</code> 来限制上传文件的格式等。</p><h3 id="filelist" tabindex="-1">FileList <a class="header-anchor" href="#filelist" aria-hidden="true">#</a></h3><p>包含File文件集合的list，通常来自的files属性</p><h2 id="_3、filereader" tabindex="-1">3、FileReader <a class="header-anchor" href="#_3、filereader" aria-hidden="true">#</a></h2><p>FileReader 是一个异步 API，用于读取文件并提取其内容以供进一步使用。FileReader 可以将 Blob 读取为不同的格式。</p><blockquote><p>注意：FileReader 仅用于以安全的方式从用户（远程）系统读取文件内容，不能用于从文件系统中按路径名简单地读取文件。</p></blockquote><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> reader </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">FileReader</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">reader</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">readAsDataURL</span><span style="color:#A6ACCD;">(file)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">reader</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">onload</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">reader</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">result</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h3 id="filereader属性" tabindex="-1">FileReader属性 <a class="header-anchor" href="#filereader属性" aria-hidden="true">#</a></h3><p>常用属性如下：</p><ul><li>error：表示在读取文件时发生的错误；</li><li>result：文件内容。该属性仅在读取操作完成后才有效，数据的格式取决于使用哪个方法来启动读取操作。</li><li>readyState：表示FileReader状态的数字。取值如下：</li></ul><table><thead><tr><th>常量名</th><th>值</th><th>描述</th></tr></thead><tbody><tr><td>EMPTY</td><td>0</td><td>还没有加载任何数据</td></tr><tr><td>LOADING</td><td>1</td><td>数据正在被加载</td></tr><tr><td>DONE</td><td>2</td><td>已完成全部的读取请求</td></tr></tbody></table><h3 id="filereader方法" tabindex="-1">FileReader方法 <a class="header-anchor" href="#filereader方法" aria-hidden="true">#</a></h3><p>FileReader 对象提供了以下方法来加载文件：</p><ul><li><code>readAsArrayBuffer()</code>：读取指定 Blob 中的内容，完成之后，result 属性中保存的将是被读取文件的 ArrayBuffer 数据对象；</li><li><code>FileReader.readAsBinaryString()</code>：读取指定 Blob 中的内容，完成之后，result 属性中将包含所读取文件的原始二进制数据；</li><li><code>FileReader.readAsDataURL()</code>：读取指定 Blob 中的内容，完成之后，result 属性中将包含一个data: URL 格式的 Base64 字符串以表示所读取文件的内容。</li><li><code>FileReader.readAsText()</code>：读取指定 Blob 中的内容，完成之后，result 属性中将包含一个字符串以表示所读取的文件内容。</li></ul><h3 id="filereader事件" tabindex="-1">FileReader事件 <a class="header-anchor" href="#filereader事件" aria-hidden="true">#</a></h3><p>FileReader 对象常用的事件如下：</p><ul><li><code>abort</code>：该事件在读取操作被中断时触发；</li><li><code>error</code>：该事件在读取操作发生错误时触发；</li><li><code>load</code>：该事件在读取操作完成时触发；</li><li><code>progress</code>：该事件在读取 Blob 时触发。提供了两个属性：loaded（已读取量）和total（需读取总量）。</li></ul><p>可以使用 <code>on</code> 监听这些事件，由于 <code>FileReader</code> 对象继承自 <code>EventTarget</code>，因此还可以使用 <code>addEventListener()</code> 监听上述事件</p><h2 id="_4、arraybuffer" tabindex="-1">4、ArrayBuffer <a class="header-anchor" href="#_4、arraybuffer" aria-hidden="true">#</a></h2><p>ArrayBuffer 对象用来表示通用的、固定长度的<strong>原始二进制数据缓冲区</strong>。ArrayBuffer 的内容不能直接操作，只能通过 <code>DataView</code> 对象或 <code>TypedArray</code> 对象来访问，这些对象用于读取和写入缓冲区内容。</p><p>ArrayBuffer 本身就是一个黑盒，不能直接读写所存储的数据，需要借助以下视图对象来读写：</p><ul><li><strong>TypedArray</strong>：用来生成内存的视图，通过9个构造函数，可以生成9种数据格式的视图。是用来向网卡、声卡之类的本机设备传送数据，所以使用本机的字节序就可以了</li><li><strong>DataViews</strong>：用来生成内存的视图，可以自定义格式和字节序。是用来处理网络设备传来的数据，所以大端字节序或小端字节序是可以自行设定的</li></ul><p><img src="`+o+'" alt="img_1.png"></p><p><img src="'+p+`" alt="img_2.png"></p><p><code>TypedArray</code> 视图和 <code>DataView</code> 视图的区别主要是<strong>字节序</strong>，前者的数组成员都是同一个数据类型，后者的数组成员可以是不同的数据类型。</p><p>那 ArrayBuffer 与 Blob 有啥区别呢？</p><ul><li>根据 ArrayBuffer 和 Blob 的特性，Blob 作为一个整体文件，适合用于传输；</li><li>当需要对二进制数据进行操作时（比如要修改某一段数据时），就可以使用 ArrayBuffer。</li></ul><h3 id="arraybuffer" tabindex="-1">ArrayBuffer <a class="header-anchor" href="#arraybuffer" aria-hidden="true">#</a></h3><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> buffer </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">ArrayBuffer</span><span style="color:#A6ACCD;">(bytelength)</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>ArrayBuffer() 构造函数可以分配指定字节数量的缓冲区，其参数和返回值如下：</p><ul><li><strong>参数</strong>：它接受一个参数，即 <code>bytelength</code>，表示要创建数组缓冲区的大小（以字节为单位）；</li><li><strong>返回值</strong>：返回一个新的指定大小的ArrayBuffer对象，内容初始化为0。</li></ul><h4 id="arraybuffer-prototype-bytelength" tabindex="-1">ArrayBuffer.prototype.byteLength <a class="header-anchor" href="#arraybuffer-prototype-bytelength" aria-hidden="true">#</a></h4><blockquote><p>只读属性，表示 ArrayBuffer 的 byte 的大小，在 ArrayBuffer 构造完成时生成，不可改变</p></blockquote><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> buffer </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">ArrayBuffer</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">16</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(buffer</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">byteLength)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;">// 16</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h4 id="arraybuffer-prototype-slice" tabindex="-1">ArrayBuffer.prototype.slice() <a class="header-anchor" href="#arraybuffer-prototype-slice" aria-hidden="true">#</a></h4><blockquote><p>该方法可以用来截取 ArrayBuffer 实例，它返回一个新的 ArrayBuffer ，它的内容是这个 ArrayBuffer 的字节副本。</p><blockquote><p>这个方法实际上有两步操作，首先会分配一段指定长度的内存，然后拷贝原来ArrayBuffer对象的置顶部分。</p></blockquote></blockquote><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> buffer </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">ArrayBuffer</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">16</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(buffer</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">slice</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">8</span><span style="color:#A6ACCD;">))</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;">// 16</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h4 id="arraybuffer-isview" tabindex="-1">ArrayBuffer.isView() <a class="header-anchor" href="#arraybuffer-isview" aria-hidden="true">#</a></h4><blockquote><p>用来判断参数是否是 TypedArray 实例或者 DataView 实例</p><blockquote><p>如果参数是 ArrayBuffer 的视图实例则返回 true，例如类型数组对象或 DataView 对象；否则返回 false</p></blockquote></blockquote><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> buffer </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">ArrayBuffer</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">16</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">ArrayBuffer</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">isView</span><span style="color:#A6ACCD;">(buffer)   </span><span style="color:#676E95;font-style:italic;">// false</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> view </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Uint32Array</span><span style="color:#A6ACCD;">(buffer)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">ArrayBuffer</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">isView</span><span style="color:#A6ACCD;">(view)     </span><span style="color:#676E95;font-style:italic;">// true</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="typedarray" tabindex="-1">TypedArray <a class="header-anchor" href="#typedarray" aria-hidden="true">#</a></h3><p>TypedArray 对象一共提供 9 种类型的视图，每一种视图都是一种构造函数。如下：</p><table><thead><tr><th>元素</th><th>类型化数组</th><th>字节</th><th>描述</th></tr></thead><tbody><tr><td>Int8</td><td>Int8Array</td><td>1</td><td>8 位有符号整数</td></tr><tr><td>Uint8</td><td>Uint8Array</td><td>1</td><td>8 位无符号整数</td></tr><tr><td>Uint8C</td><td>Uint8ClampedArray</td><td>1</td><td>8 位无符号整数</td></tr><tr><td>Int16</td><td>Int16Array</td><td>2</td><td>16 位有符号整数</td></tr><tr><td>Uint16</td><td>Uint16Array</td><td>2</td><td>16 位无符号整数</td></tr><tr><td>Int32</td><td>Int32Array</td><td>4</td><td>32 位有符号整数</td></tr><tr><td>Uint32</td><td>Uint32Array</td><td>4</td><td>32 位无符号整数</td></tr><tr><td>Float32</td><td>Float32Array</td><td>4</td><td>32 位浮点</td></tr><tr><td>Float64</td><td>Float64Array</td><td>8</td><td>64 位浮点</td></tr></tbody></table><p><strong>Uint8Array</strong>：将 ArrayBuffer 中的每个字节视为一个整数，可能的值从 0 到 255 （一个字节等于 8 位）。这样的值称为 <code>8 位无符号整数</code>。</p><p><strong>Uint16Array</strong>：将 ArrayBuffer 中任意两个字节视为一个整数，可能的值从 0 到 65535。 这样的值称为 <code>16 位无符号整数</code>。</p><p><strong>Uint32Array</strong>：将 ArrayBuffer 中任何四个字节视为一个整数，可能值从 0 到 4294967295，这样的值称为 <code>32 位无符号整数</code>。</p><blockquote><p>这些构造函数生成的对象统称为 <code>TypedArray</code> 对象。</p><blockquote><p>它们和正常的数组很类似，都有 length 属性，都能用索引获取数组元素，所有数组的方法都可以在类型化数组上面使用。</p></blockquote></blockquote><p><strong>那类型化数组和数组有什么区别呢？</strong></p><ul><li>类型化数组的元素都是连续的，不会为空；</li><li>类型化数组的所有成员的类型和格式相同；</li><li>类型化数组元素默认值为 0；</li><li>类型化数组本质上只是一个视图层，不会存储数据，数据都存储在更底层的 ArrayBuffer 对象中。</li></ul><blockquote><p>TypedArray 只是一个概念，实际使用的是那9个对象</p></blockquote><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Int8Array</span><span style="color:#A6ACCD;">(length)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 通过分配指定长度内容进行分配</span></span>
<span class="line"><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Int8Array</span><span style="color:#A6ACCD;">(typedArray)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 接收一个视图实例作为参数</span></span>
<span class="line"><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Int8Array</span><span style="color:#A6ACCD;">(object)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 接收一个普通数组，eg：[1, 2, 3]</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// new Int8Array(buffer [, byteOffset [, length]]); // new ArrayBuffer(8)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> view </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Int16Array</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">8</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">view</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">length</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">      </span><span style="color:#676E95;font-style:italic;">// 8</span></span>
<span class="line"><span style="color:#A6ACCD;">view</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">byteLength</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;">// 16</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h4 id="typedarray-bytes-per-element" tabindex="-1">TypedArray.BYTES_PER_ELEMENT <a class="header-anchor" href="#typedarray-bytes-per-element" aria-hidden="true">#</a></h4><p>每种视图的构造函数都有一个 <code>BYTES_PER_ELEMENT</code> 属性，表示这种数据类型占据的字节数</p><h4 id="typedarray-prototype-buffer" tabindex="-1">TypedArray.prototype.buffer <a class="header-anchor" href="#typedarray-prototype-buffer" aria-hidden="true">#</a></h4><p>返回内存中对应的 ArrayBuffer对象，只读属性</p><h4 id="typedarray-prototype-slice" tabindex="-1">TypedArray.prototype.slice() <a class="header-anchor" href="#typedarray-prototype-slice" aria-hidden="true">#</a></h4><p>返回一个指定位置的新的 TypedArray实例</p><h3 id="dataview" tabindex="-1">DataView <a class="header-anchor" href="#dataview" aria-hidden="true">#</a></h3><p>DataView 视图是一个可以从二进制 <code>ArrayBuffer</code> 对象中读写多种数值类型的底层接口，使用它时，不用考虑不同平台的字节序问题。</p><blockquote><p>DataView 视图提供更多操作选项，而且支持设定字节序。</p></blockquote><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#676E95;font-style:italic;">// new DataView(buffer [, byteOffset [, byteLength]])</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> buffer </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">ArrayBuffer</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">24</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> view </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">DataView</span><span style="color:#A6ACCD;">(buffer)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><ul><li>buffer：一个已经存在的 ArrayBuffer 对象，DataView 对象的数据源。</li><li>byteOffset：可选，此 DataView 对象的第一个字节在 buffer 中的字节偏移。如果未指定，则默认从第一个字节开始。</li><li>byteLength：可选，此 DataView 对象的字节长度。如果未指定，这个视图的长度将匹配 buffer 的长度。</li></ul><h4 id="读取内存" tabindex="-1">读取内存 <a class="header-anchor" href="#读取内存" aria-hidden="true">#</a></h4><p>DataView 实例提供了以下方法来读取内存，它们的参数都是一个字节序号，表示开始读取的字节位置：</p><ul><li>getInt8：读取1个字节，返回一个8位整数。</li><li>getUint8：读取1个字节，返回一个无符号的8位整数。</li><li>getInt16：读取2个字节，返回一个16位整数。</li><li>getUint16：读取2个字节，返回一个无符号的16位整数。</li><li>getInt32：读取4个字节，返回一个32位整数。</li><li>getUint32：读取4个字节，返回一个无符号的32位整数。</li><li>getFloat32：读取4个字节，返回一个32位浮点数。</li><li>getFloat64：读取8个字节，返回一个64位浮点数。</li></ul><h4 id="写入内存" tabindex="-1">写入内存 <a class="header-anchor" href="#写入内存" aria-hidden="true">#</a></h4><p>DataView 实例提供了以下方法来写入内存，它们都接受两个参数，第一个参数表示开始写入数据的字节序号，第二个参数为写入的数据：</p><ul><li>setInt8：写入1个字节的8位整数。</li><li>setUint8：写入1个字节的8位无符号整数。</li><li>setInt16：写入2个字节的16位整数。</li><li>setUint16：写入2个字节的16位无符号整数。</li><li>setInt32：写入4个字节的32位整数。</li><li>setUint32：写入4个字节的32位无符号整数。</li><li>setFloat32：写入4个字节的32位浮点数。</li><li>setFloat64：写入8个字节的64位浮点数。</li></ul><h2 id="_5、object-url" tabindex="-1">5、Object URL <a class="header-anchor" href="#_5、object-url" aria-hidden="true">#</a></h2><p>Object URL（MDN定义名称）又称Blob URL（W3C定义名称），是HTML5中的新标准。它是一个用来表示File Object 或Blob Object 的URL</p><blockquote><p>Blob URL/Object URL 是一种伪协议，允许将 Blob 和 File 对象用作图像、二进制数据下载链接等的 URL 源。</p></blockquote><p>对于 Blob/File 对象，可以使用 URL构造函数的 createObjectURL() 方法创建给出的对象的 URL。这个 URL 对象表示指定的 File 对象或 Blob 对象。我们可以在 <code>img</code>、 <code>script</code> 标签的 src 中或者 <code>a</code> 和 <code>link</code> 标签的 href 属性中使用这个 URL。</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> objUrl </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> URL</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">createObjectURL</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">File</span><span style="color:#A6ACCD;">([ </span><span style="color:#89DDFF;">&quot;&quot;</span><span style="color:#A6ACCD;"> ]</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">filename</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">))</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(objUrl)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">URL</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">revokeObjectURL</span><span style="color:#A6ACCD;">(objUrl)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="_6、base64" tabindex="-1">6、Base64 <a class="header-anchor" href="#_6、base64" aria-hidden="true">#</a></h2><p>Base64 是一种基于64个可打印字符来表示二进制数据的表示方法。Base64 编码普遍应用于需要通过被设计为处理文本数据的媒介上储存和传输二进制数据而需要编码该二进制数据的场景。这样是为了保证数据的完整并且不用在传输过程中修改这些数据</p><p>在 JavaScript 中，有两个函数被分别用来处理解码和编码 base64 字符串：</p><ul><li>atob()：解码，解码一个 Base64 字符串；</li><li>btoa()：编码，从一个字符串或者二进制数据编码一个 Base64 字符串。</li></ul><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#82AAFF;">btoa</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">JavaScript</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)       </span><span style="color:#676E95;font-style:italic;">// &#39;SmF2YVNjcmlwdA==&#39;</span></span>
<span class="line"><span style="color:#82AAFF;">atob</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">SmF2YVNjcmlwdA==</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">) </span><span style="color:#676E95;font-style:italic;">// &#39;JavaScript&#39;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="base64应用" tabindex="-1">Base64应用 <a class="header-anchor" href="#base64应用" aria-hidden="true">#</a></h3><p>多数场景就是基于Data URL的。比如，使用 canvas.toDataURL() 和 fileReader.readAsDataURL() 生成base64图片</p><ul><li><code>BlobURL</code> 的格式是 <code>blob:域名/uuid</code></li><li><code>DataURL</code> 的格式是 <code>data:[mediatype[;base64,]]</code> // data:text/plain;base64,77bas8ux==</li></ul><h2 id="_7、格式转换" tabindex="-1">7、格式转换 <a class="header-anchor" href="#_7、格式转换" aria-hidden="true">#</a></h2><h3 id="arraybuffer-→-blob" tabindex="-1">ArrayBuffer → blob <a class="header-anchor" href="#arraybuffer-→-blob" aria-hidden="true">#</a></h3><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> blob </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Blob</span><span style="color:#A6ACCD;">([ </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Uint8Array</span><span style="color:#A6ACCD;">(arrayBuffer</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> byteOffset</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> length) ])</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="arraybuffer-→-base64" tabindex="-1">ArrayBuffer → base64 <a class="header-anchor" href="#arraybuffer-→-base64" aria-hidden="true">#</a></h3><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> base64 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">btoa</span><span style="color:#A6ACCD;">(String</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">fromCharCode</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">apply</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">null,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Uint8Array</span><span style="color:#A6ACCD;">(arrayBuffer)))</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="base64-→-blob" tabindex="-1">base64 → blob <a class="header-anchor" href="#base64-→-blob" aria-hidden="true">#</a></h3><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> base64toBlob </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">base64Data</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">contentType</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">sliceSize</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">byteCharacters</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">atob</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">base64Data</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">byteArrays</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> []</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#F07178;"> (</span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">offset</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">offset</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">byteCharacters</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">length</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">offset</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">sliceSize</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">slice</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">byteCharacters</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">slice</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">offset</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">offset</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">sliceSize</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">byteNumbers</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">new</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">Array</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">slice</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">length</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#F07178;"> (</span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">i</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">i</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">slice</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">length</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">i</span><span style="color:#89DDFF;">++</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#A6ACCD;">byteNumbers</span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">i</span><span style="color:#F07178;">] </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">slice</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">charCodeAt</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">i</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">    </span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">byteArray</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">new</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">Uint8Array</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">byteNumbers</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">byteArrays</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">push</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">byteArray</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">  </span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">blob</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">new</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">Blob</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">byteArrays</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> type</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">contentType</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">blob</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><h3 id="blob-→-arraybuffer" tabindex="-1">blob → ArrayBuffer <a class="header-anchor" href="#blob-→-arraybuffer" aria-hidden="true">#</a></h3><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> blobToArrayBuffer </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">blob</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Promise</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">resolve</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">reject</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">reader</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">new</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">FileReader</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">reader</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">onload</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">resolve</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">reader</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">result</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">reader</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">onerror</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">reject</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">reader</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">readAsArrayBuffer</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">blob</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h3 id="const-objecturl-url-createobjecturl-blob" tabindex="-1">const objectUrl = URL.createObjectURL(blob); <a class="header-anchor" href="#const-objecturl-url-createobjecturl-blob" aria-hidden="true">#</a></h3><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> objectUrl </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> URL</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">createObjectURL</span><span style="color:#A6ACCD;">(blob)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div>`,116),c=[t];function i(y,d,A,F,D,b){return n(),a("div",null,c)}const h=s(r,[["render",i]]);export{u as __pageData,h as default};
