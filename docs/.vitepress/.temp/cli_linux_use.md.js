import { ssrRenderAttrs, ssrRenderStyle } from "vue/server-renderer";
import { useSSRContext } from "vue";
import { _ as _export_sfc } from "./plugin-vue_export-helper.cc2b3d55.js";
const __pageData = JSON.parse('{"title":"使用","description":"Linux命令使用记录","frontmatter":{"title":"使用","description":"Linux命令使用记录","category":"linux","tags":["Linux","CLI"]},"headers":[],"relativePath":"cli/linux/use.md","filePath":"cli/linux/use.md","lastUpdated":1686303485000}');
const _sfc_main = { name: "cli/linux/use.md" };
function _sfc_ssrRender(_ctx, _push, _parent, _attrs, $props, $setup, $data, $options) {
  _push(`<div${ssrRenderAttrs(_attrs)}><h1 id="shell-命令" tabindex="-1">Shell 命令 <a class="header-anchor" href="#shell-命令" aria-label="Permalink to &quot;Shell 命令&quot;">​</a></h1><h2 id="打印彩色文本" tabindex="-1">打印彩色文本 <a class="header-anchor" href="#打印彩色文本" aria-label="Permalink to &quot;打印彩色文本&quot;">​</a></h2><ol><li>使用 <code>printf</code></li></ol><blockquote><p>printf &quot;\\e[背景色;字体色m 格式化输出符号 \\e[0m&quot; &quot;文本内容&quot;</p></blockquote><div class="language-shell line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="${ssrRenderStyle({ "color": "#82AAFF" })}">printf</span><span style="${ssrRenderStyle({ "color": "#A6ACCD" })}"> </span><span style="${ssrRenderStyle({ "color": "#89DDFF" })}">&quot;</span><span style="${ssrRenderStyle({ "color": "#C3E88D" })}">\\e[40;37m %s\\n \\e[0m</span><span style="${ssrRenderStyle({ "color": "#89DDFF" })}">&quot;</span><span style="${ssrRenderStyle({ "color": "#A6ACCD" })}"> </span><span style="${ssrRenderStyle({ "color": "#89DDFF" })}">&quot;</span><span style="${ssrRenderStyle({ "color": "#C3E88D" })}">hello world!</span><span style="${ssrRenderStyle({ "color": "#89DDFF" })}">&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ol start="2"><li>使用 <code>echo</code></li></ol><blockquote><p>echo -e &quot;\\e[背景色;字体色m 文本内容 \\e[0m&quot;</p></blockquote><div class="language-shell line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="${ssrRenderStyle({ "color": "#82AAFF" })}">echo</span><span style="${ssrRenderStyle({ "color": "#A6ACCD" })}"> </span><span style="${ssrRenderStyle({ "color": "#C3E88D" })}">-e</span><span style="${ssrRenderStyle({ "color": "#A6ACCD" })}"> </span><span style="${ssrRenderStyle({ "color": "#89DDFF" })}">&quot;</span><span style="${ssrRenderStyle({ "color": "#C3E88D" })}">\\e[40;37m hello world! \\e[0m</span><span style="${ssrRenderStyle({ "color": "#89DDFF" })}">&quot;</span><span style="${ssrRenderStyle({ "color": "#89DDFF" })}">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><hr><table><thead><tr><th>用途</th><th>重置</th><th>黑色</th><th>红色</th><th>绿色</th><th>黄色</th><th>蓝色</th><th>洋红</th><th>青色</th><th>白色</th></tr></thead><tbody><tr><td>文本</td><td>0</td><td>30</td><td>31</td><td>32</td><td>33</td><td>34</td><td>35</td><td>36</td><td>37</td></tr><tr><td>背景</td><td>0</td><td>40</td><td>41</td><td>42</td><td>43</td><td>44</td><td>45</td><td>46</td><td>47</td></tr></tbody></table><h2 id="特殊字符" tabindex="-1">特殊字符 <a class="header-anchor" href="#特殊字符" aria-label="Permalink to &quot;特殊字符&quot;">​</a></h2><p>在 <code>Linux</code> 中，<code>;</code>、<code>||</code>、<code>&amp;&amp;</code>、<code>|</code>、<code>&amp;</code> 都是用于控制命令的执行方式的特殊字符。</p><ol><li><code>;</code></li></ol><p>分号用于分隔多个命令，这些命令将依次执行，无论前面的命令是否成功</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="${ssrRenderStyle({ "color": "#A6ACCD" })}">command1 ; command2 ; command3</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ol start="2"><li><code>||</code></li></ol><p>双竖线用于当左侧的命令执行失败时才执行右侧的命令</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="${ssrRenderStyle({ "color": "#A6ACCD" })}">command1 || command2</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ol start="3"><li>&amp;&amp;</li></ol><p>双与用于当左侧的命令执行成功时才执行右侧的命令</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="${ssrRenderStyle({ "color": "#A6ACCD" })}">command1 &amp;&amp; command2</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ol start="4"><li><code>|</code></li></ol><p>单竖线用于将左侧的命令的输出作为右侧命令的输入</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="${ssrRenderStyle({ "color": "#A6ACCD" })}">command1 | command2</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ol start="5"><li><code>&amp;</code></li></ol><p>单与用于将命令放到后台执行，允许在终端继续执行其他命令</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="${ssrRenderStyle({ "color": "#A6ACCD" })}">command &amp;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><hr><p>这些特殊字符可以组合使用，以便更好地控制命令的执行。例如：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="${ssrRenderStyle({ "color": "#A6ACCD" })}">command1 &amp;&amp; (command2 || command3) ; command4 | command5</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><code>command1</code> 执行成功后，将会执行 <code>command2</code> 或 <code>command3</code> 中的一个（如果 <code>command2</code> 执行失败），然后执行 <code>command4</code> 并将其输出发送到 <code>command5</code>。 需要注意的是，使用这些特殊字符时，需要小心处理命令的执行顺序，以免出现意外的结果。</p></div>`);
}
const _sfc_setup = _sfc_main.setup;
_sfc_main.setup = (props, ctx) => {
  const ssrContext = useSSRContext();
  (ssrContext.modules || (ssrContext.modules = /* @__PURE__ */ new Set())).add("cli/linux/use.md");
  return _sfc_setup ? _sfc_setup(props, ctx) : void 0;
};
const use = /* @__PURE__ */ _export_sfc(_sfc_main, [["ssrRender", _sfc_ssrRender]]);
export {
  __pageData,
  use as default
};
